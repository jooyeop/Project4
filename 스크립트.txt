안녕하세요 11기 박주엽입니다.
딥러닝 섹션에서 이미지 분류 프로젝트를 준비하였습니다.
그리고 이미지 분류 중에서도 화면에 보이시는 도로표지판 분류에 대한 프로젝트를 진행해 보았습니다.


1. 여러분이 풀고자 하는 문제를 잘 설정하였는가 ?

4차산업이 시작되면서 가장 떠오르고있는 사업중에 하나가 자율주행자동차 입니다.
자동차가 자율주행을 하기 위해서는 다양한 조건들이 필요합니다.
신호등 상황 , 전방상태 , 각종 길거리의 상태나 주차장의상태 예를 들면 도로에 쓰레기는 없는지 등등
AI에겐 다양한 상황에 대한 지식이 필요합니다.
그 중에서는 도로 표지판도 빠질 수 없습니다.
도로표지판을 인식하지 않으면 어린이보호구역이나, 속도제한이 있는 구역 등 제한이 있는 도로에서
제한에 조건을 맞추지 못하게 되고 도로는 무법지대 처럼 정신없는 상황이 연출 될 수 있습니다.

그러므로 자율주행자동차의 필수학습 중 도로표지판 인식에 대한 딥러닝 프로젝트를 지금부터 소개해드리겠습니다.
우선 저는 Kaggle에 등록되어있는 독일 도로 표지판을 사용했습니다.
국내 도로표지판을 사용하고 싶었지만, 데이터셋과 classes 종류 즉 표지판의 종류 개수를 구하지 못하여서
안타깝게도 캐글에 등록되어있는 데이터셋을 사용하게 되었습니다.

2. 문제를 풀기 위한 모델선택을 알맞게 하였는가 ?

준비한 프로젝트를 보면서 모델에 대해 한번 더 설명을 드리겠지만,
이미지 분류전용인 CNN 모델을 사용하게 되었습니다.
CNN모델이란 이미지의 특징을 추출하여 클래스를 분류하는 학습방식으로 이미지를 분류합니다.

CNN은 주로 이미지나 영상 데이터를 처리할 때 쓰이는 모델이며,
영상속에서 객체, 얼굴, 장면 인식을 위한 패턴을 찾을 때 특히 유용하고
그 외 오디오나 시계열 데이터, 신호 같은 데이터를 분류하는 데에도 효과 적입니다.
또한 제가 준비한 자율주행 파트인 차량 및 얼굴인식 그리고 도로표지판같은 객체 인식과 같은
컴퓨터 비전이 필요한 응용 분야에서도 CNN이 많이 사용되기 때문에
CNN모델을 선택하여 딥러닝 모델을 구축하였습니다.

지금부터 프로젝트 안내를 시작하겠습니다.

1. 구글드라이브를 이용하여 데이터셋을 업로드 하였으므로 구글마운트를 통하여 드라이브를 연결시켜줍니다.

2. 구글 드라이브를 연결 후 드라이브안에 저장되어 있는 이미지폴더를 불러와줍니다.

3. 변수설정을 준비해주며 표지판의 종류가 43개이므로 classes 수를 43개로 지정해줍니다.

4. 불러온 이미지의 높이와 폭을 동일하게 그리고 이미지를 차원형태로 변경하여 사용할 수 있게 전처리 과정을 해줍니다.

5. 위에서 전처리된 데이터들을 데이터와 라벨이라는곳에 담아줍니다. 데이터와 라벨의 공간은 위에서 변수설정할 때 만들어 주었습니다. 

6. 이제 모델학습을 진행하기 전에 변수에 담긴 데이터를 훈련데이터와 테스트 데이터로 나누어 준비합니다.

7. 분할 된 데이터의 상태를 확인합니다. 위에서 보았던 상태와 비교해서 현재 데이터 분할이 잘 진행 된것을 확인할 수 있습니다.

8. 핫 인코딩을 통하여 레이블을 하나의 인코딩으로 변환 시켜줍니다.

9. 이제 모델을 구축합니다.
아까 말씀드렸던 CNN 모델을 구축할 것입니다.
CNN은 입력층 / 노드층 / 출력층으로 이루어져있으며
입력층인 Input층은 43개의 클래스로 되어있으며 따로 지정해주지 않아도 되고
노드층부터 지정해주겠습니다.

노드층에선 첫번째 컨볼루션레이어와 두번째 컨볼루션레이어로 되어있으며
컨볼루션 레이어를 통과할 때 마다
필터수를 이용하여 더 많은 특징으로 구분하여 추출하고 학습합니다.
또한 드롭아웃이라는 기능을 이용하여 학습마다 25%의 데이터를 제외하여 과적합을 방지해주는 기능을 이용합니다.

마지막층인 출력층으로 이동하여 43개의 클래스를 구분해 내야하기 때문에 softmax라는 함수를 사용하여 줍니다.
출력층도 마찬가지로 드롭아웃 기능을 이용하여 50%의 데이터를 제외해주고 과적합을 방지해줍니다.

위에서 학습된 모델을 컴파일 하여줍니다.
다중분류이기 때문에 손실함수는 카테고리컬 크로스엔트로피를 사용해주고, 옵티마이저는 아담이라는 함수를 사용하였습니다.

생성된 모델을 확인해봅니다.

10. 이제 위에서 만들어진 모델을 가지고 학습을 시켜줍니다.
총 10번의 훈련이 진행됩니다. 훈련이 진행되면서 정확도와 손실함수가 어떤식으로 변화하는지 확인해봅니다.
확인해보면 손실함수는 점점 줄어들고 해당 상태의 정확도는 늘어나기도하며 줄어들기도 하는 상태를 보여줍니다.
가장 잘 나온상태의 정확도는 0.9665 입니다. 정확도가 상당히 높다는것을 확인할 수 있습니다.

11. 이제 학습된 모델을 테스트 데이터에 대입하여 최종적으로 모델일 잘 만들어졌는지 확인해봅니다.
0.9908로 상당히 좋은 모델의 상태임을 확인할 수 있습니다.

12. 찬스레벨을 확인해보려고합니다. 찬스레벨은 100%확률에서 해당 클래스를 맞출 확률이 몇%인가를 확인할 수 있습니다.
제가 만든 모델의 클래스 수는 43개로 0.02이상 나와야 현저히 높은수준의 모델임을 확인할 수있습니다.
모델을 확인하였을때 0.9~1.0까지 0.02에비해 현저히 높은 모델임을 다시한번 확인할 수 있습니다.

13. K-fold cross검증방식 즉 교차검증을 사용하여 해당 모델의 일반화 가능성을 확인해봅니다.
역시나 0.99이상의 점수가 확인되면서 수준높은 모델임을 증명해주고 있습니다.

14. 이제 위에서 적용한 모델을 가지고 표지판을 잘 분류하는지 모델이 분류한 표지판을 한번 시각화 해보도록 하겠습니다.
43개의 모든 표지판이 표시가 되었고 앞번호가 정답인표지판번호이며 뒤에 괄호안에 있는 번호가
모델이 인식한 표지판의 번호입니다.
모델이 잘 분류를 하였을땐 밑에 번호가 초록색으로 표시되며 틀렸을땐 빨간색으로 표시가 됩니다.
모든 번호가 초록색으로 표시가 되었으므로 해당 모델은 위에서 보았던 점수 0.99이상의 모델임을 확인시켜주었습니다.

이상 준비한 프로젝트는 여기까지이고, 영상초반에 말씀드렸듯이 국내표지판 데이터셋을 구하여서 모델을 학습시키지 못했지만,
추후엔 꼭 국내표지판 데이터셋을 구해서 딥러닝 모델을 구축해보고싶습니다.

이번 프로젝트를 진행하면서 오류도 많이 만나보았고 데이터를 정하는데 많은 고민이 되었지만
프로젝트를 마무리하는 현시점에선 모든게 다 경험이였습니다.
이미지 분류 외에도 다른 프로젝트도 개인적으로 진행하면서 딥러닝에 대해 더 많이 배워보고 싶습니다.
뿌듯했던 프로젝트가 되었습니다.